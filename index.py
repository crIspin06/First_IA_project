#Importa√ß√£o de bibliotecas
from sentence_transformers import SentenceTransformer, util
from comandos import *

#Carregando modelo de linguagem (substituir por um pr√≥prio no futuro)
print("Carregando modelo...")
modelo = SentenceTransformer('all-MiniLM-L6-v2') #mais rapido: " all-MiniLM-L6-v2 "// mais preciso: " all-mpnet-base-v2 "
print("Modelo carregado!")

#Transformando emembeddings
    #Transformando a a√ß√£o
frases_acoes = list(acoes.keys())
embeddings_acoes = modelo.encode(frases_acoes, convert_to_tensor=True)
    #Transformando os par√¢metros
frases_parametros = list(parametros.keys())
embeddings_parametros = modelo.encode(frases_parametros, convert_to_tensor=True)


#Interpretando o input
def interpretar_comando(frase_usuario, threshold=0.55):
    emb_usuario = modelo.encode(frase_usuario, convert_to_tensor=True)  #Transforma o input do usu√°rio em um vetor de n√∫meros
    
    #Verificando Similaridades
        #Da a√ß√£o...
    sim_acoes = util.cos_sim(emb_usuario, embeddings_acoes)             #Compara o input do usu√°rio com a lista de a√ß√µes, pra ver se existe alguma dispon√≠vel  (comandos.py)
    idx_acao = sim_acoes.argmax().item()                                #Pega o √≠ndice da frase mais parecida com a do usu√°rio, dentre as op√ß√µes
    valor_acao = sim_acoes[0][idx_acao].item()                          #Valor de similaridade com a a√ß√£o mais pr√≥xima, pra tentar identificar se houve um input aleat√≥rio
    
        #Dos par√¢metros...
    contexto = extrair_parametro(frase_usuario) #Tenta extrair pelo pr√≥prio input pra economizar processamento
    #Se n√£o conseguir, tenta ir pela aproxima√ß√£o
    if not contexto:
        sim_params = util.cos_sim(emb_usuario, embeddings_parametros)       #  -=-
        idx_param = sim_params.argmax().item()                              #  Essas tr√™s linhas fazem a mesma coisa, mas com os par√¢metros.
        valor_param = sim_params[0][idx_param].item()                       #  -=-
        #Se o usu√°rio falou um par√¢metro reconhec√≠vel, adiciona no contexto
        if valor_param >= .4:
            param_frase = frases_parametros[idx_param]
            contexto = parametros[param_frase]

    #Se a similaridade for menor que um valor m√≠nimo (provavelmente √© um input aleat√≥rio)
    if (valor_acao < threshold):
        print(f"\nü§î N√£o entendi o que voc√™ quis dizer.")
        return

    funcao_acao = acoes[frases_acoes[idx_acao]]         #  ==> Pega a fun√ß√£o associada √† frase

    #Debugg
    if 'idx_param' in locals():         #Ve se "idx_param" existe, se sim, entrou no if da linha 32
        param_texto = frases_parametros[idx_param]
        similaridade_texto = f"{valor_param:.2f}"
    else:
        param_texto = str(contexto)
        similaridade_texto = "N/A"
    print(f"\nüë§ Usu√°rio disse: {frase_usuario}")
    print(f"üîç A√ß√£o mais parecida: '{frases_acoes[idx_acao]}' (similaridade: {valor_acao:.2f})")
    print(f"üîç Par√¢metro mais parecido: '{param_texto}' (similaridade: {similaridade_texto})")
    print(f"Contexto: {contexto}")
    print(f"Fun√ß√£o √† chamar: {funcao_acao}")

    #Tenta chamar a fun√ß√£o passando os parametros
    try:
        funcao_acao(**contexto)
    #Se n√£o aceitar, chama sem parametro nenhum mesmo
    except TypeError:
        funcao_acao()


#Execu√ß√£o e intera√ß√£o com o usu√°rio
while True:
    entrada = input("\nDigite um comando (ou 'sair'): ")
    if entrada.lower() == "sair":
        break
    interpretar_comando(entrada)
